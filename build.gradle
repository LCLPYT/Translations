plugins {
    id 'java'
    id 'maven-publish'
    id 'gradle-build-utils'
}

Properties props = loadProperties.call('publish.properties') as Properties

group = project.maven_group
version = gitVersion.call()
archivesBaseName = project.archives_base_name

repositories {
    mavenCentral()

    maven {
        url = 'https://repo.lclpnet.work/repository/internal'
    }
}

dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'work.lclpnet:lclpnetwork-api:1.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
}

// tweak jar tasks
[jar, sourcesJar].each {
    // include license file
    it.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name
            from components.java

            pom {
                name = 'translations4j'
                description = 'Library to manage I18n with Java applications.'
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            } else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}